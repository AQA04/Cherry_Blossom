name: CI/CD - Despliegue Condicional (EKS o ECS)

on:
  push:
    branches:
      - main
  # 1. Permite la ejecuci√≥n manual y define la elecci√≥n del servicio
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Servicio de destino en AWS (EKS o ECS)'
        required: true
        type: choice
        options:
          - EKS
          - ECS

# 2. Definici√≥n de Variables de Entorno
env:
  AWS_REGION: us-east-1                   # üö® CAMBIA ESTO: Tu regi√≥n de AWS
  ECR_REPOSITORY: cherry-blossom-repo     # üö® CAMBIA ESTO: Nombre de tu repositorio ECR
  EKS_CLUSTER_NAME: cluster-uni           # üö® CAMBIA ESTO: Nombre de tu cl√∫ster EKS
  ECS_CLUSTER_NAME: cluster-prod          # üö® CAMBIA ESTO: Nombre de tu cl√∫ster ECS
  ECS_SERVICE_NAME: cherry-blossom-service # üö® CAMBIA ESTO: Nombre de tu servicio ECS
  ECS_CONTAINER_NAME: php-web-container   # üö® CAMBIA ESTO: Nombre del contenedor en tu task-definition.json

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨á Checkout C√≥digo
        uses: actions/checkout@v4
      
# ----------------------------------------------------
# FASE 1: AUTENTICACI√ìN, CONSTRUCCI√ìN Y PUSH A ECR
# Estos pasos son comunes para EKS y ECS
# ----------------------------------------------------
      - name: üîë Configurar Credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üê≥ Login a Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: üî® Construir y Subir Imagen Docker
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }} 
        run: |
          # Construye la imagen usando el Dockerfile en la ra√≠z
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # Sube la imagen a ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Exporta la URI de la imagen para los pasos de despliegue
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

# ----------------------------------------------------
# FASE 2: DESPLIEGUE CONDICIONAL EN EKS
# Se ejecuta si el par√°metro de entrada es 'EKS'
# ----------------------------------------------------
      - name: ‚ò∏ Configurar Kubectl para EKS
        if: github.event.inputs.deployment_target == 'EKS'
        uses: aws-actions/amazon-eks-setup@v2
        with:
          cluster-name: ${{ env.EKS_CLUSTER_NAME }}

      - name: üìù Actualizar Manifiesto de Kubernetes
        # Reemplaza un marcador de posici√≥n en el deployment.yaml con la nueva URI de la imagen
        if: github.event.inputs.deployment_target == 'EKS'
        run: |
          sed -i "s|<IMAGE_URI_PLACEHOLDER>|${{ env.IMAGE_URI }}|g" k8s/deployment.yaml
          
      - name: üöÄ Aplicar Manifiestos en EKS
        if: github.event.inputs.deployment_target == 'EKS'
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

# ----------------------------------------------------
# FASE 2: DESPLIEGUE CONDICIONAL EN ECS
# Se ejecuta si el par√°metro de entrada es 'ECS'
# ----------------------------------------------------
      - name: üìÑ Renderizar Task Definition de ECS
        # Rellena el task-definition.json con la URI de la imagen construida
        if: github.event.inputs.deployment_target == 'ECS'
        id: render-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          # üö® RUTA A TU ARCHIVO DE TASK DEFINITION JSON üö®
          task-definition: ecs/task-definition.json
          container-name: ${{ env.ECS_CONTAINER_NAME }} 
          image: ${{ env.IMAGE_URI }}

      - name: üîÑ Desplegar en Amazon ECS
        if: github.event.inputs.deployment_target == 'ECS'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}